{"uid":"504c1bb5ef145ac6","name":"test_register_and_update_profile","fullName":"test_user_workflow#test_register_and_update_profile","historyId":"30d2df8c8fcf1caae16a76d0968af4c5","time":{"start":1720115031454,"stop":1720115034010,"duration":2556},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div class=\"search-result-item\"> is not clickable at point (640,89) because another element <div class=\"sidebar-overlay\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31","statusTrace":"driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"a4967419-3989-431b-9721-c0425ea53265\")>\n\n    def test_register_and_update_profile(driver):\n        username, password = register_user(driver)\n        allure.attach(driver.get_screenshot_as_png(), name=\"registration\", attachment_type=allure.attachment_type.PNG)\n    \n        driver.get(\"http://localhost:3000\")\n    \n        print(\"Открыта главная страница\")\n    \n        try:\n            login_input = driver.find_element(By.XPATH, \"//input[@placeholder='Логин']\")\n            print(\"Элемент найден с помощью XPath //input[@placeholder='Логин']\")\n            login_input.send_keys(username)\n    \n            password_input = driver.find_element(By.XPATH, \"//input[@placeholder='Пароль']\")\n            print(\"Элемент найден с помощью XPath //input[@placeholder='Пароль']\")\n            password_input.send_keys(password)\n    \n            driver.find_element(By.XPATH, \"//button[contains(text(),'Войти')]\").click()\n            allure.attach(driver.get_screenshot_as_png(), name=\"login\", attachment_type=allure.attachment_type.PNG)\n    \n            wait = WebDriverWait(driver, 10)\n            settings_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@class='header-toggle-button'])[1]\")))\n            settings_button.click()\n    \n            driver.find_element(By.XPATH, \"//button[contains(text(),'Настройки')]\").click()\n    \n            nickname_input = driver.find_element(By.XPATH, \"//input[@placeholder='Введите новый никнейм']\")\n            nickname_input.clear()\n            nickname_input.send_keys(\"Крутой228\")\n    \n            # Находим элемент input для загрузки файла\n            file_input = driver.find_element(By.XPATH, \"//input[@type='file']\")\n            file_input.send_keys(os.path.abspath(\"C:\\\\Smile\\\\test\\\\RIMURI.jpg\"))\n    \n            driver.find_element(By.XPATH, \"//button[contains(text(),'Сохранить')]\").click()\n            allure.attach(driver.get_screenshot_as_png(), name=\"update_profile\", attachment_type=allure.attachment_type.PNG)\n    \n            driver.find_element(By.XPATH, \"//button[normalize-space()='<']\").click()\n    \n            search_input = driver.find_element(By.XPATH, \"//input[@placeholder='Поиск по никнейму или телефону...']\")\n            search_input.send_keys(\"Крутой228\")\n    \n>           driver.find_element(By.XPATH, \"//div[@class='search-result-item']\").click()\n\ntest_user_workflow.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nc:\\users\\vsevolod\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nc:\\users\\vsevolod\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nc:\\users\\vsevolod\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000158713A1A60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <div class=\\\\\"search-result...sys.mjs:205:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div class=\"search-result-item\"> is not clickable at point (640,89) because another element <div class=\"sidebar-overlay\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\n\nc:\\users\\vsevolod\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1720115025759,"stop":1720115031453,"duration":5694},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div class=\"search-result-item\"> is not clickable at point (640,89) because another element <div class=\"sidebar-overlay\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31","statusTrace":"driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"a4967419-3989-431b-9721-c0425ea53265\")>\n\n    def test_register_and_update_profile(driver):\n        username, password = register_user(driver)\n        allure.attach(driver.get_screenshot_as_png(), name=\"registration\", attachment_type=allure.attachment_type.PNG)\n    \n        driver.get(\"http://localhost:3000\")\n    \n        print(\"Открыта главная страница\")\n    \n        try:\n            login_input = driver.find_element(By.XPATH, \"//input[@placeholder='Логин']\")\n            print(\"Элемент найден с помощью XPath //input[@placeholder='Логин']\")\n            login_input.send_keys(username)\n    \n            password_input = driver.find_element(By.XPATH, \"//input[@placeholder='Пароль']\")\n            print(\"Элемент найден с помощью XPath //input[@placeholder='Пароль']\")\n            password_input.send_keys(password)\n    \n            driver.find_element(By.XPATH, \"//button[contains(text(),'Войти')]\").click()\n            allure.attach(driver.get_screenshot_as_png(), name=\"login\", attachment_type=allure.attachment_type.PNG)\n    \n            wait = WebDriverWait(driver, 10)\n            settings_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@class='header-toggle-button'])[1]\")))\n            settings_button.click()\n    \n            driver.find_element(By.XPATH, \"//button[contains(text(),'Настройки')]\").click()\n    \n            nickname_input = driver.find_element(By.XPATH, \"//input[@placeholder='Введите новый никнейм']\")\n            nickname_input.clear()\n            nickname_input.send_keys(\"Крутой228\")\n    \n            # Находим элемент input для загрузки файла\n            file_input = driver.find_element(By.XPATH, \"//input[@type='file']\")\n            file_input.send_keys(os.path.abspath(\"C:\\\\Smile\\\\test\\\\RIMURI.jpg\"))\n    \n            driver.find_element(By.XPATH, \"//button[contains(text(),'Сохранить')]\").click()\n            allure.attach(driver.get_screenshot_as_png(), name=\"update_profile\", attachment_type=allure.attachment_type.PNG)\n    \n            driver.find_element(By.XPATH, \"//button[normalize-space()='<']\").click()\n    \n            search_input = driver.find_element(By.XPATH, \"//input[@placeholder='Поиск по никнейму или телефону...']\")\n            search_input.send_keys(\"Крутой228\")\n    \n>           driver.find_element(By.XPATH, \"//div[@class='search-result-item']\").click()\n\ntest_user_workflow.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nc:\\users\\vsevolod\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nc:\\users\\vsevolod\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nc:\\users\\vsevolod\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000158713A1A60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <div class=\\\\\"search-result...sys.mjs:205:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div class=\"search-result-item\"> is not clickable at point (640,89) because another element <div class=\"sidebar-overlay\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\n\nc:\\users\\vsevolod\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Register a new user","time":{"start":1720115031454,"stop":1720115032094,"duration":640},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"driver","value":"<selenium.webdriver.firefox.webdriver.WebDriver (session=\"a4967419-3989-431b-9721-c0425ea53265\")>"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"86b95c2c3f05c3c4","name":"registration","source":"86b95c2c3f05c3c4.png","type":"image/png","size":43540},{"uid":"4ab9756bc38d272","name":"login","source":"4ab9756bc38d272.png","type":"image/png","size":32117},{"uid":"e077e76404ce5bc7","name":"update_profile","source":"e077e76404ce5bc7.png","type":"image/png","size":38509},{"uid":"b047187d34829161","name":"error","source":"b047187d34829161.png","type":"image/png","size":53836}],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":1},"afterStages":[{"name":"driver::0","time":{"start":1720115034131,"stop":1720115036775,"duration":2644},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"suite","value":"test_user_workflow"},{"name":"host","value":"DESKTOP-BJNM022"},{"name":"thread","value":"18012-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_user_workflow"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"504c1bb5ef145ac6.json","parameterValues":[]}